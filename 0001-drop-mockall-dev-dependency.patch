diff --git a/src/modules/battery.rs b/src/modules/battery.rs
index 6a0396b..dd9abb5 100644
--- a/src/modules/battery.rs
+++ b/src/modules/battery.rs
@@ -1,7 +1,5 @@
 use super::{Context, Module, RootModuleConfig, Shell};
 use crate::configs::battery::BatteryConfig;
-#[cfg(test)]
-use mockall::automock;
 
 use crate::formatter::StringFormatter;
 
@@ -125,7 +123,6 @@ struct BatteryStatus {
     state: battery::State,
 }
 
-#[cfg_attr(test, automock)]
 pub trait BatteryInfoProvider {
     fn get_battery_info(&self) -> Option<BatteryInfo>;
 }
@@ -173,254 +170,3 @@ impl BatteryInfoProvider for BatteryInfoProviderImpl {
         )
     }
 }
-
-#[cfg(test)]
-mod tests {
-    use super::*;
-    use crate::test::ModuleRenderer;
-    use ansi_term::Color;
-
-    #[test]
-    fn no_battery_status() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| None);
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = None;
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn ignores_zero_capacity_battery() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 0.0,
-                energy_full: 0.0,
-                state: battery::State::Full,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = None;
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_full() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 1000.0,
-                energy_full: 1000.0,
-                state: battery::State::Full,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 100% "));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_charging() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 800.0,
-                energy_full: 1000.0,
-                state: battery::State::Charging,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 90
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 80% "));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_discharging() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 800.0,
-                energy_full: 1000.0,
-                state: battery::State::Discharging,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 80% "));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_unknown() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 0.0,
-                energy_full: 1.0,
-                state: battery::State::Unknown,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 0% "));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_empty() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 0.0,
-                energy_full: 1000.0,
-                state: battery::State::Empty,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 0% "));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_hidden_when_percentage_above_threshold() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 600.0,
-                energy_full: 1000.0,
-                state: battery::State::Full,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 50
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = None;
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_uses_style() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 400.0,
-                energy_full: 1000.0,
-                state: battery::State::Discharging,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 50
-                style = "bold red"
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(format!("{} ", Color::Red.bold().paint(" 40%")));
-
-        assert_eq!(expected, actual);
-    }
-
-    #[test]
-    fn battery_displayed_precision() {
-        let mut mock = MockBatteryInfoProvider::new();
-
-        mock.expect_get_battery_info().times(1).returning(|| {
-            Some(BatteryInfo {
-                energy: 129.87654,
-                energy_full: 1000.0,
-                state: battery::State::Discharging,
-            })
-        });
-
-        let actual = ModuleRenderer::new("battery")
-            .config(toml::toml! {
-                [[battery.display]]
-                threshold = 100
-                style = ""
-            })
-            .battery_info_provider(&mock)
-            .collect();
-        let expected = Some(String::from(" 13% "));
-
-        assert_eq!(expected, actual);
-    }
-}
